@page "/point-manager"
@using System.ComponentModel.DataAnnotations
@using gussmann_loyalty_program.Models
@using gussmann_loyalty_program.Services
@inject LoyaltyService LoyaltyService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Point Manager - Gussmann Loyalty Program</PageTitle>

<h1>Point Manager</h1>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">Add Points</h5>
            </div>
            <div class="card-body">
                <EditForm Model="addPointsModel" OnValidSubmit="AddPoints">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    <div class="mb-3">
                        <label class="form-label">Customer Email</label>
                        <InputText class="form-control" @bind-Value="addPointsModel.CustomerEmail" placeholder="Enter customer email" />
                        <ValidationMessage For="@(() => addPointsModel.CustomerEmail)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Points to Add</label>
                        <InputNumber class="form-control" @bind-Value="addPointsModel.Points" />
                        <ValidationMessage For="@(() => addPointsModel.Points)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <InputText class="form-control" @bind-Value="addPointsModel.Description" placeholder="Reason for adding points" />
                        <ValidationMessage For="@(() => addPointsModel.Description)" />
                    </div>

                    <button type="submit" class="btn btn-success" disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Add Points
                    </button>
                </EditForm>
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">Redeem Points</h5>
            </div>
            <div class="card-body">
                <EditForm Model="redeemPointsModel" OnValidSubmit="RedeemPoints">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    <div class="mb-3">
                        <label class="form-label">Customer Email</label>
                        <InputText class="form-control" @bind-Value="redeemPointsModel.CustomerEmail" placeholder="Enter customer email" />
                        <ValidationMessage For="@(() => redeemPointsModel.CustomerEmail)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Points to Redeem</label>
                        <InputNumber class="form-control" @bind-Value="redeemPointsModel.Points" />
                        <ValidationMessage For="@(() => redeemPointsModel.Points)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <InputText class="form-control" @bind-Value="redeemPointsModel.Description" placeholder="Reason for redeeming points" />
                        <ValidationMessage For="@(() => redeemPointsModel.Description)" />
                    </div>

                    <button type="submit" class="btn btn-warning" disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Redeem Points
                    </button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<hr class="my-4" />

<div class="card">
    <div class="card-header">
        <h5 class="mb-0">Customer Lookup</h5>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <div class="input-group">
                    <InputText class="form-control" @bind-Value="searchEmail" placeholder="Enter customer email to lookup" />
                    <button class="btn btn-outline-secondary" @onclick="LookupCustomer">
                        <span class="bi bi-search"></span> Lookup
                    </button>
                </div>
            </div>
        </div>

        @if (selectedCustomer != null)
        {
            <div class="mt-3">
                <div class="row">
                    <div class="col-md-6">
                        <h6>Customer Information</h6>
                        <p><strong>Name:</strong> @selectedCustomer.FirstName @selectedCustomer.LastName</p>
                        <p><strong>Email:</strong> @selectedCustomer.Email</p>
                        <p><strong>Phone:</strong> @selectedCustomer.PhoneNumber</p>
                        <p><strong>Member Since:</strong> @selectedCustomer.DateJoined.ToString("MMMM dd, yyyy")</p>
                    </div>
                    <div class="col-md-6">
                        @if (selectedLoyaltyAccount != null)
                        {
                            <h6>Loyalty Account</h6>
                            <p><strong>Account Number:</strong> @selectedLoyaltyAccount.AccountNumber</p>
                            <p><strong>Current Balance:</strong> @selectedLoyaltyAccount.PointsBalance.ToString("N0") points</p>
                            <p><strong>Tier Level:</strong> 
                                <span class="badge @GetTierBadgeClass(selectedLoyaltyAccount.TierLevel)">@selectedLoyaltyAccount.TierLevel</span>
                            </p>
                            <p><strong>Lifetime Earned:</strong> @selectedLoyaltyAccount.LifetimePointsEarned.ToString("N0") points</p>
                            <p><strong>Lifetime Redeemed:</strong> @selectedLoyaltyAccount.LifetimePointsRedeemed.ToString("N0") points</p>
                        }
                    </div>
                </div>

                @if (recentTransactions.Any())
                {
                    <h6 class="mt-3">Recent Point Transactions</h6>
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Type</th>
                                    <th>Points</th>
                                    <th>Description</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var transaction in recentTransactions.Take(5))
                                {
                                    <tr>
                                        <td>@transaction.TransactionDate.ToString("MM/dd/yyyy")</td>
                                        <td>
                                            <span class="badge @GetTransactionTypeBadge(transaction.TransactionType)">
                                                @transaction.TransactionType
                                            </span>
                                        </td>
                                        <td class="@(transaction.Points >= 0 ? "text-success" : "text-danger")">
                                            @transaction.Points.ToString("N0")
                                        </td>
                                        <td>@transaction.Description</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private PointsModel addPointsModel = new();
    private PointsModel redeemPointsModel = new();
    private string searchEmail = string.Empty;
    private bool isProcessing = false;
    
    private Customer? selectedCustomer;
    private LoyaltyAccount? selectedLoyaltyAccount;
    private List<PointTransaction> recentTransactions = new();

    public class PointsModel
    {
        [Required]
        [EmailAddress]
        public string CustomerEmail { get; set; } = string.Empty;

        [Required]
        [System.ComponentModel.DataAnnotations.Range(1, 999999)]
        public decimal Points { get; set; }

        [Required]
        public string Description { get; set; } = string.Empty;
    }

    private async Task AddPoints()
    {
        isProcessing = true;
        try
        {
            var customer = await LoyaltyService.GetCustomerByEmailAsync(addPointsModel.CustomerEmail);
            if (customer == null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Customer not found with that email address.");
                return;
            }

            var success = await LoyaltyService.AddPointsAsync(customer.Id, addPointsModel.Points, addPointsModel.Description);
            if (success)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Successfully added {addPointsModel.Points:N0} points to {customer.FirstName} {customer.LastName}.");
                addPointsModel = new();
                
                // Refresh customer data if currently selected
                if (selectedCustomer?.Id == customer.Id)
                {
                    await LookupCustomerById(customer.Id);
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to add points. Please try again.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task RedeemPoints()
    {
        isProcessing = true;
        try
        {
            var customer = await LoyaltyService.GetCustomerByEmailAsync(redeemPointsModel.CustomerEmail);
            if (customer == null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Customer not found with that email address.");
                return;
            }

            var success = await LoyaltyService.RedeemPointsAsync(customer.Id, redeemPointsModel.Points, redeemPointsModel.Description);
            if (success)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Successfully redeemed {redeemPointsModel.Points:N0} points for {customer.FirstName} {customer.LastName}.");
                redeemPointsModel = new();
                
                // Refresh customer data if currently selected
                if (selectedCustomer?.Id == customer.Id)
                {
                    await LookupCustomerById(customer.Id);
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to redeem points. Customer may have insufficient points.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task LookupCustomer()
    {
        if (string.IsNullOrWhiteSpace(searchEmail))
            return;

        var customer = await LoyaltyService.GetCustomerByEmailAsync(searchEmail);
        if (customer != null)
        {
            await LookupCustomerById(customer.Id);
        }
        else
        {
            selectedCustomer = null;
            selectedLoyaltyAccount = null;
            recentTransactions.Clear();
            await JSRuntime.InvokeVoidAsync("alert", "Customer not found with that email address.");
        }
    }

    private async Task LookupCustomerById(int customerId)
    {
        selectedCustomer = await LoyaltyService.GetCustomerByIdAsync(customerId);
        if (selectedCustomer != null)
        {
            selectedLoyaltyAccount = await LoyaltyService.GetLoyaltyAccountAsync(customerId);
            recentTransactions = await LoyaltyService.GetPointTransactionsAsync(customerId, 10);
        }
    }

    private string GetTierBadgeClass(string tierLevel)
    {
        return tierLevel.ToLower() switch
        {
            "bronze" => "bg-secondary",
            "silver" => "bg-light text-dark",
            "gold" => "bg-warning text-dark",
            "platinum" => "bg-dark",
            _ => "bg-secondary"
        };
    }

    private string GetTransactionTypeBadge(PointTransactionType type)
    {
        return type switch
        {
            PointTransactionType.Earned => "bg-success",
            PointTransactionType.Redeemed => "bg-warning text-dark",
            PointTransactionType.Expired => "bg-danger",
            PointTransactionType.Adjusted => "bg-info",
            _ => "bg-secondary"
        };
    }
}