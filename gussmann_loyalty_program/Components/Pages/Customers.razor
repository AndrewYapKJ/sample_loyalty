@page "/customers"
@using gussmann_loyalty_program.Models
@using gussmann_loyalty_program.Services
@inject LoyaltyService LoyaltyService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Customers - Gussmann Loyalty Program</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
   <h1>Customers</h1>
   <button class="btn btn-primary" @onclick="ShowAddCustomerModal">
      <span class="bi bi-plus-circle"></span> Add Customer
   </button>
</div>

@if (customers != null && customers.Any())
{
   <div class="table-responsive">
      <table class="table table-striped table-hover">
         <thead class="table-dark">
            <tr>
               <th>Name</th>
               <th>Email</th>
               <th>Phone</th>
               <th>City, State</th>
               <th>Date Joined</th>
               <th>Loyalty Account</th>
               <th>Status</th>
               <th>Actions</th>
            </tr>
         </thead>
         <tbody>
            @foreach (var customer in customers)
            {
               <tr>
                  <td>@customer.FirstName @customer.LastName</td>
                  <td>@customer.Email</td>
                  <td>@customer.PhoneNumber</td>
                  <td>@customer.City, @customer.State</td>
                  <td>@customer.DateJoined.ToString("MM/dd/yyyy")</td>
                  <td>
                     @if (customer.LoyaltyAccounts.Any())
                     {
                        var account = customer.LoyaltyAccounts.First();
                        <div>
                           <strong>@account.AccountNumber</strong><br />
                           <small class="text-muted">@account.PointsBalance.ToString("N0") points</small>
                        </div>
                     }
                  </td>
                  <td>
                     <span class="badge @(customer.IsActive ? "bg-success" : "bg-danger")">
                        @(customer.IsActive ? "Active" : "Inactive")
                     </span>
                  </td>
                  <td>
                     <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewCustomer(customer.Id)">
                        <span class="bi bi-eye"></span>
                     </button>
                     <button class="btn btn-sm btn-outline-secondary ms-1" @onclick="() => EditCustomer(customer)">
                        <span class="bi bi-pencil"></span>
                     </button>
                  </td>
               </tr>
            }
         </tbody>
      </table>
   </div>
}
else
{
   <div class="text-center py-5">
      <h4 class="text-muted">No customers found</h4>
      <p class="text-muted">Get started by adding your first customer.</p>
      <button class="btn btn-primary" @onclick="ShowAddCustomerModal">
         <span class="bi bi-plus-circle"></span> Add Your First Customer
      </button>
   </div>
}

<!-- Add/Edit Customer Modal -->
@if (showModal)
{
   <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
      <div class="modal-dialog modal-lg">
         <div class="modal-content">
            <div class="modal-header">
               <h5 class="modal-title">@(isEditing ? "Edit Customer" : "Add New Customer")</h5>
               <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
               <EditForm Model="currentCustomer" OnValidSubmit="SaveCustomer">
                  <DataAnnotationsValidator />
                  <ValidationSummary class="text-danger" />

                  <div class="row">
                     <div class="col-md-6">
                        <div class="mb-3">
                           <label class="form-label">First Name</label>
                           <InputText class="form-control" @bind-Value="currentCustomer.FirstName" />
                           <ValidationMessage For="@(() => currentCustomer.FirstName)" />
                        </div>
                     </div>
                     <div class="col-md-6">
                        <div class="mb-3">
                           <label class="form-label">Last Name</label>
                           <InputText class="form-control" @bind-Value="currentCustomer.LastName" />
                           <ValidationMessage For="@(() => currentCustomer.LastName)" />
                        </div>
                     </div>
                  </div>

                  <div class="row">
                     <div class="col-md-8">
                        <div class="mb-3">
                           <label class="form-label">Email</label>
                           <InputText class="form-control" @bind-Value="currentCustomer.Email" type="email" />
                           <ValidationMessage For="@(() => currentCustomer.Email)" />
                        </div>
                     </div>
                     <div class="col-md-4">
                        <div class="mb-3">
                           <label class="form-label">Phone Number</label>
                           <InputText class="form-control" @bind-Value="currentCustomer.PhoneNumber" />
                           <ValidationMessage For="@(() => currentCustomer.PhoneNumber)" />
                        </div>
                     </div>
                  </div>

                  <div class="mb-3">
                     <label class="form-label">Address</label>
                     <InputText class="form-control" @bind-Value="currentCustomer.Address" />
                     <ValidationMessage For="@(() => currentCustomer.Address)" />
                  </div>

                  <div class="row">
                     <div class="col-md-4">
                        <div class="mb-3">
                           <label class="form-label">City</label>
                           <InputText class="form-control" @bind-Value="currentCustomer.City" />
                           <ValidationMessage For="@(() => currentCustomer.City)" />
                        </div>
                     </div>
                     <div class="col-md-4">
                        <div class="mb-3">
                           <label class="form-label">State</label>
                           <InputText class="form-control" @bind-Value="currentCustomer.State" />
                           <ValidationMessage For="@(() => currentCustomer.State)" />
                        </div>
                     </div>
                     <div class="col-md-4">
                        <div class="mb-3">
                           <label class="form-label">Zip Code</label>
                           <InputText class="form-control" @bind-Value="currentCustomer.ZipCode" />
                           <ValidationMessage For="@(() => currentCustomer.ZipCode)" />
                        </div>
                     </div>
                  </div>

                  <div class="modal-footer">
                     <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                     <button type="submit" class="btn btn-primary">
                        @(isEditing ? "Update Customer" : "Add Customer")
                     </button>
                  </div>
               </EditForm>
            </div>
         </div>
      </div>
   </div>
}

@code {
   private List<Customer> customers = new();
   private Customer currentCustomer = new();
   private bool showModal = false;
   private bool isEditing = false;

   protected override async Task OnInitializedAsync()
   {
      await LoadCustomers();
   }

   private async Task LoadCustomers()
   {
      customers = await LoyaltyService.GetAllCustomersAsync();
   }

   private void ShowAddCustomerModal()
   {
      currentCustomer = new Customer();
      isEditing = false;
      showModal = true;
   }

   private void EditCustomer(Customer customer)
   {
      currentCustomer = new Customer
      {
         Id = customer.Id,
         FirstName = customer.FirstName,
         LastName = customer.LastName,
         Email = customer.Email,
         PhoneNumber = customer.PhoneNumber,
         Address = customer.Address,
         City = customer.City,
         State = customer.State,
         ZipCode = customer.ZipCode,
         DateJoined = customer.DateJoined,
         IsActive = customer.IsActive
      };
      isEditing = true;
      showModal = true;
   }

   private async Task SaveCustomer()
   {
      try
      {
         if (isEditing)
         {
            await LoyaltyService.UpdateCustomerAsync(currentCustomer);
         }
         else
         {
            await LoyaltyService.CreateCustomerAsync(currentCustomer);
         }

         await LoadCustomers();
         CloseModal();
      }
      catch (Exception ex)
      {
         await JSRuntime.InvokeVoidAsync("alert", $"Error saving customer: {ex.Message}");
      }
   }

   private void CloseModal()
   {
      showModal = false;
      currentCustomer = new();
   }

   private async Task ViewCustomer(int customerId)
   {
      // TODO: Implement customer detail view
      await JSRuntime.InvokeVoidAsync("alert", $"View customer details for ID: {customerId}");
   }
}