@page "/"
@page "/admin"
@layout gussmann_loyalty_program.Components.Layout.LoginLayout
@using Microsoft.AspNetCore.Components.Authorization
@using gussmann_loyalty_program.Services
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ISimpleAuthService AuthService
@inject HttpClient HttpClient
@inject ILogger<AdminLogin> Logger
@rendermode InteractiveServer

<PageTitle>Admin Login - Gussmann Loyalty Program</PageTitle>

<div class="container-fluid vh-100 d-flex align-items-center justify-content-center"
    style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
    <div class="row w-100 justify-content-center">
        <div class="col-md-6 col-lg-4">
            <div class="card shadow-lg border-0" style="border-radius: 15px;">
                <div class="card-body p-5">
                    <div class="text-center mb-4">
                        <i class="bi bi-shield-lock text-primary" style="font-size: 3rem;"></i>
                        <h2 class="mt-3 mb-1">Admin Login</h2>
                        <p class="text-muted">Access the loyalty program admin panel</p>
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            @errorMessage
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success" role="alert">
                            <i class="bi bi-check-circle me-2"></i>
                            @successMessage
                        </div>
                    }

                    <form @onsubmit="HandleLogin" @onsubmit:preventDefault="true">
                        <div class="mb-3">
                            <label class="form-label fw-semibold">
                                <i class="bi bi-person me-2"></i>Username
                            </label>
                            <input type="text" class="form-control form-control-lg" @bind="loginModel.Username"
                                placeholder="Enter your username" disabled="@isLoading" style="border-radius: 10px;" />
                        </div>

                        <div class="mb-4">
                            <label class="form-label fw-semibold">
                                <i class="bi bi-lock me-2"></i>Password
                            </label>
                            <input type="password" class="form-control form-control-lg" @bind="loginModel.Password"
                                placeholder="Enter your password" disabled="@isLoading" style="border-radius: 10px;" />
                        </div>

                        <button type="submit" class="btn btn-primary btn-lg w-100 mb-3" disabled="@isLoading"
                            style="border-radius: 10px; background: linear-gradient(45deg, #667eea, #764ba2);">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>Signing In...</span>
                            }
                            else
                            {
                                <i class="bi bi-box-arrow-in-right me-2"></i>
                                <span>Sign In</span>
                            }
                        </button>
                    </form>

                    @if (showCreateAdmin)
                    {
                        <div class="border-top pt-3">
                            <h6 class="text-muted mb-3">Create Initial Admin Account</h6>
                            <form @onsubmit="HandleCreateAdmin" @onsubmit:preventDefault="true">
                                <div class="mb-2">
                                    <input type="text" class="form-control" @bind="createAdminModel.Username"
                                        placeholder="Admin Username" style="border-radius: 8px;" />
                                </div>
                                <div class="mb-2">
                                    <input type="email" class="form-control" @bind="createAdminModel.Email"
                                        placeholder="Admin Email" style="border-radius: 8px;" />
                                </div>
                                <div class="mb-2">
                                    <input type="text" class="form-control" @bind="createAdminModel.FullName"
                                        placeholder="Full Name" style="border-radius: 8px;" />
                                </div>
                                <div class="mb-3">
                                    <input type="password" class="form-control" @bind="createAdminModel.Password"
                                        placeholder="Password" style="border-radius: 8px;" />
                                </div>
                                <button type="submit" class="btn btn-outline-primary btn-sm w-100"
                                    disabled="@isCreatingAdmin" style="border-radius: 8px;">
                                    @if (isCreatingAdmin)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                        <span>Creating...</span>
                                    }
                                    else
                                    {
                                        <span>Create Admin Account</span>
                                    }
                                </button>
                            </form>
                        </div>
                    }

                    <div class="text-center mt-3">
                        <small class="text-muted">
                            <i class="bi bi-shield-check me-1"></i>
                            Secured with JWT authentication
                        </small>
                    </div>
                </div>
            </div>

            <div class="text-center mt-4">
                <a href="/" class="btn btn-outline-light">
                    <i class="bi bi-arrow-left me-2"></i>Back to Dashboard
                </a>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private CreateAdminModel createAdminModel = new();
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isLoading = false;
    private bool isCreatingAdmin = false;
    private bool showCreateAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already logged in
        var isLoggedIn = await IsUserLoggedInAsync();
        if (isLoggedIn)
        {
            Navigation.NavigateTo("/campaigns");
            return;
        }

        // Check if we need to show create admin section
        await CheckIfAdminExistsAsync();
    }

    private async Task<bool> IsUserLoggedInAsync()
    {
        try
        {
            var accessToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "accessToken");
            if (!string.IsNullOrEmpty(accessToken))
            {
                return await AuthService.ValidateTokenAsync(accessToken);
            }
            return false;
        }
        catch
        {
            return false;
        }
    }

    private async Task CheckIfAdminExistsAsync()
    {
        try
        {
            var adminExists = await AuthService.IsAdminExistsAsync();
            showCreateAdmin = !adminExists;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error checking admin existence");
            showCreateAdmin = true; // Show form if we can't check
        }
    }

    private async Task HandleLogin()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
        isLoading = true;

        try
        {
            if (string.IsNullOrWhiteSpace(loginModel.Username) || string.IsNullOrWhiteSpace(loginModel.Password))
            {
                errorMessage = "Please enter both username and password.";
                return;
            }

            var result = await AuthService.LoginAsync(loginModel.Username, loginModel.Password);

            if (result.Success)
            {
                // Store tokens in localStorage with correct keys
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "jwtToken", result.AccessToken);
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "refreshToken", result.RefreshToken);
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "adminLoggedIn", "true");
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "adminInfo", System.Text.Json.JsonSerializer.Serialize(new
                {
                    id = result.Admin?.Id,
                    username = result.Admin?.Username,
                    email = result.Admin?.Email,
                    fullName = result.Admin?.FullName,
                    role = result.Admin?.Role
                }));

                successMessage = "Login successful! Redirecting...";
                StateHasChanged();

                await Task.Delay(1000);
                Navigation.NavigateTo("/dashboard", true);
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during login");
            errorMessage = "An error occurred during login. Please try again.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleCreateAdmin()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
        isCreatingAdmin = true;

        try
        {
            if (string.IsNullOrWhiteSpace(createAdminModel.Username) ||
            string.IsNullOrWhiteSpace(createAdminModel.Password) ||
            string.IsNullOrWhiteSpace(createAdminModel.Email))
            {
                errorMessage = "Please fill in all required fields.";
                return;
            }

            var success = await AuthService.CreateInitialAdminAsync(
            createAdminModel.Username,
            createAdminModel.Email,
            createAdminModel.Password,
            createAdminModel.FullName);

            if (success)
            {
                successMessage = "Admin account created successfully! You can now log in.";
                showCreateAdmin = false;
                createAdminModel = new();
            }
            else
            {
                errorMessage = "Failed to create admin account. Username or email may already exist.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error creating admin");
            errorMessage = "An error occurred while creating the admin account.";
        }
        finally
        {
            isCreatingAdmin = false;
            StateHasChanged();
        }
    }

    private class LoginModel
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    private class CreateAdminModel
    {
        public string Username { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string FullName { get; set; } = string.Empty;
    }
}