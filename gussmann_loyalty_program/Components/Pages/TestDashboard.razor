@page "/test-dashboard"
@using gussmann_loyalty_program.Services
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ISimpleAuthService AuthService
@rendermode InteractiveServer

@if (!isAuthenticated)
{
   <!-- Show nothing, redirect will happen -->
}
else
{
    <h1>âœ… Test Dashboard</h1>
    <p>If you can see this, the redirect is working!</p>
    <p>Token from localStorage: <span id="token-display">Loading...</span></p>
    <p>Refresh token: <span id="refresh-token-display">Loading...</span></p>

    <div style="margin-top: 2rem;">
        <button class="btn btn-primary" @onclick="GoToDashboard">Go to Real Dashboard</button>
        <button class="btn btn-secondary" @onclick="GoToLogin">Back to Login</button>
    </div>
}

@code {
    private bool isAuthenticated = false;

   protected override async Task OnAfterRenderAsync(bool firstRender)
   {
      if (firstRender)
      {
         await CheckAuthentication();
         if (isAuthenticated)
         {
            try
            {
               var jwtToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "jwtToken");
               var refreshToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "refreshToken");
               
               await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('token-display').textContent = '{(string.IsNullOrEmpty(jwtToken) ? "Not found" : "Found!")}'");
               await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('refresh-token-display').textContent = '{(string.IsNullOrEmpty(refreshToken) ? "Not found" : "Found!")}'");
            }
            catch (Exception ex)
            {
               await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('token-display').textContent = 'Error: {ex.Message}'");
            }
         }
         StateHasChanged();
      }
   }

   private async Task CheckAuthentication()
   {
      try
      {
         var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "jwtToken");

         if (string.IsNullOrEmpty(token))
         {
            Navigation.NavigateTo("/", true);
            return;
         }

         isAuthenticated = await AuthService.ValidateTokenAsync(token);

         if (!isAuthenticated)
         {
            Navigation.NavigateTo("/", true);
         }
      }
      catch (Exception ex)
      {
         Console.WriteLine($"Authentication error: {ex.Message}");
         Navigation.NavigateTo("/", true);
      }
   }

    private void GoToDashboard()
    {
        Navigation.NavigateTo("/dashboard");
    }

    private void GoToLogin()
    {
        Navigation.NavigateTo("/");
    }
}