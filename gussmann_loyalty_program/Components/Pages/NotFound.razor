@page "/not-found"
@using gussmann_loyalty_program.Services
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ISimpleAuthService AuthService
@rendermode InteractiveServer

<PageTitle>Page Not Found - Gussmann Loyalty Program</PageTitle>

@if (!isAuthenticated)
{
   <!-- Show nothing, redirect will happen -->
}
else
{
   <div class="container-fluid">
      <div class="row justify-content-center">
         <div class="col-md-6 text-center">
            <div class="py-5">
               <i class="bi bi-exclamation-triangle text-warning" style="font-size: 5rem;"></i>
               <h1 class="display-4 mt-4 text-dark-green">404</h1>
               <h2 class="h3 mb-3">Page Not Found</h2>
               <p class="text-muted mb-4">
                  The page you're looking for doesn't exist or has been moved.
               </p>

               <div class="d-flex gap-3 justify-content-center">
                  <button class="btn btn-success" @onclick="GoToDashboard">
                     <i class="bi bi-house-door me-2"></i>Go to Dashboard
                  </button>
                  <button class="btn btn-outline-secondary" @onclick="GoBack">
                     <i class="bi bi-arrow-left me-2"></i>Go Back
                  </button>
               </div>
            </div>
         </div>
      </div>
   </div>
}

@code {
   private bool isAuthenticated = false;

   protected override async Task OnAfterRenderAsync(bool firstRender)
   {
      if (firstRender)
      {
         await CheckAuthentication();
         StateHasChanged();
      }
   }

   private async Task CheckAuthentication()
   {
      try
      {
         var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "jwtToken");

         if (string.IsNullOrEmpty(token))
         {
            Navigation.NavigateTo("/admin", true);
            return;
         }

         isAuthenticated = await AuthService.ValidateTokenAsync(token);

         if (!isAuthenticated)
         {
            Navigation.NavigateTo("/admin", true);
         }
      }
      catch (Exception ex)
      {
         Console.WriteLine($"Authentication error: {ex.Message}");
         Navigation.NavigateTo("/admin", true);
      }
   }

   private void GoToDashboard()
   {
      Navigation.NavigateTo("/dashboard");
   }

   private async Task GoBack()
   {
      await JSRuntime.InvokeVoidAsync("history.back");
   }
}