@page "/minimallogin"
@using gussmann_loyalty_program.Services
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ISimpleAuthService AuthService
@inject ILogger<MinimalLogin> Logger
@rendermode InteractiveServer

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Gussmann Loyalty Program - Login</title>
    <link rel="icon" type="image/png" href="favicon.png" />
</head>
<body>

<style>
    body {
        margin: 0;
        padding: 0;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #1e4a3b 0%, #2d5e4e 100%);
        min-height: 100vh;
    }
    
    .login-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px;
    }
    
    .login-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        padding: 2.5rem;
        width: 100%;
        max-width: 400px;
    }
    
    .brand-logo {
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .brand-logo h1 {
        color: #333;
        font-size: 2rem;
        font-weight: 700;
        margin: 0;
        margin-bottom: 0.5rem;
    }
    
    .brand-logo p {
        color: #666;
        font-size: 1rem;
        margin: 0;
    }
    
    .form-group {
        margin-bottom: 1.5rem;
    }
    
    .form-label {
        display: block;
        margin-bottom: 0.5rem;
        color: #333;
        font-weight: 500;
    }
    
    .form-control {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 2px solid #e1e5e9;
        border-radius: 8px;
        font-size: 1rem;
        transition: border-color 0.15s ease-in-out;
        box-sizing: border-box;
    }
    
    .form-control:focus {
        outline: none;
        border-color: #2d5e4e;
        box-shadow: 0 0 0 3px rgba(45, 94, 78, 0.1);
    }
    
    .btn-login {
        width: 100%;
        padding: 0.875rem 1rem;
        background: linear-gradient(135deg, #1e4a3b 0%, #2d5e4e 100%);
        border: none;
        border-radius: 8px;
        color: white;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: transform 0.15s ease;
    }
    
    .btn-login:hover {
        transform: translateY(-1px);
    }
    
    .btn-login:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
    }
    
    .alert {
        padding: 0.75rem 1rem;
        border-radius: 6px;
        margin-bottom: 1rem;
        font-size: 0.9rem;
    }
    
    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }
    
    .alert-success {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }
    
    .spinner-border {
        width: 1rem;
        height: 1rem;
        border: 2px solid currentColor;
        border-right-color: transparent;
        border-radius: 50%;
        animation: spinner-border 0.75s linear infinite;
        display: inline-block;
        margin-right: 0.5rem;
    }
    
    @@keyframes spinner-border {
        to {
            transform: rotate(360deg);
        }
    }
    
    .create-admin-section {
        margin-top: 2rem;
        padding-top: 2rem;
        border-top: 1px solid #e1e5e9;
    }
    
    .btn-outline {
        width: 100%;
        padding: 0.75rem 1rem;
        background: transparent;
        border: 2px solid #2d5e4e;
        border-radius: 8px;
        color: #2d5e4e;
        font-size: 0.9rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.15s ease;
    }
    
    .btn-outline:hover {
        background: #2d5e4e;
        color: white;
    }
</style>

<div class="login-container">
    <div class="login-card">
        <div class="brand-logo">
            <h1 style="color: #1e4a3b;">ðŸŽ¯ Gussmann</h1>
            <p style="color: #2d5e4e;">Loyalty Program Management</p>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                @errorMessage
            </div>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success">
                @successMessage
            </div>
        }

        <form @onsubmit="HandleLogin" @onsubmit:preventDefault="true">
            <div class="form-group">
                <label class="form-label">Username</label>
                <input type="text" 
                       class="form-control" 
                       @bind="loginModel.Username" 
                       placeholder="Enter username"
                       required />
            </div>

            <div class="form-group">
                <label class="form-label">Password</label>
                <input type="password" 
                       class="form-control" 
                       @bind="loginModel.Password" 
                       placeholder="Enter password"
                       required />
            </div>

            <button type="submit" 
                    class="btn-login" 
                    disabled="@isLoading">
                @if (isLoading)
                {
                    <div class="spinner-border"></div>
                    <span>Signing in...</span>
                }
                else
                {
                    <span>Sign In</span>
                }
            </button>
        </form>

        @if (!adminExists)
        {
            <div class="create-admin-section">
                @if (!showCreateAdmin)
                {
                    <button class="btn-outline" @onclick="() => showCreateAdmin = true">
                        Create Initial Admin Account
                    </button>
                }
                else
                {
                    <h6 style="text-align: center; margin-bottom: 1rem; color: #666;">Setup Administrator</h6>
                    <form @onsubmit="HandleCreateAdmin" @onsubmit:preventDefault="true">
                        <div class="form-group">
                            <input type="text" 
                                   class="form-control" 
                                   @bind="createAdminModel.Username" 
                                   placeholder="Admin Username" 
                                   required />
                        </div>
                        <div class="form-group">
                            <input type="email" 
                                   class="form-control" 
                                   @bind="createAdminModel.Email" 
                                   placeholder="Admin Email" 
                                   required />
                        </div>
                        <div class="form-group">
                            <input type="text" 
                                   class="form-control" 
                                   @bind="createAdminModel.FullName" 
                                   placeholder="Full Name" 
                                   required />
                        </div>
                        <div class="form-group">
                            <input type="password" 
                                   class="form-control" 
                                   @bind="createAdminModel.Password" 
                                   placeholder="Password" 
                                   required />
                        </div>
                        <button type="submit" 
                                class="btn-login"
                                disabled="@isCreatingAdmin">
                            @if (isCreatingAdmin)
                            {
                                <div class="spinner-border"></div>
                                <span>Creating...</span>
                            }
                            else
                            {
                                <span>Create Admin</span>
                            }
                        </button>
                    </form>
                }
            </div>
        }
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private CreateAdminModel createAdminModel = new();
    private string errorMessage = "";
    private string successMessage = "";
    private bool isLoading = false;
    private bool isCreatingAdmin = false;
    private bool showCreateAdmin = false;
    private bool adminExists = true;

    public class LoginModel
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    public class CreateAdminModel
    {
        public string Username { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string FullName { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already logged in
        await CheckExistingLogin();
        // Check if admin exists
        await CheckAdminExists();
    }

    private async Task CheckAdminExists()
    {
        try
        {
            adminExists = await AuthService.IsAdminExistsAsync();
        }
        catch
        {
            adminExists = true; // Default to true to hide create admin option if there's an error
        }
    }

    private async Task CheckExistingLogin()
    {
        try
        {
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "jwtToken");
            if (!string.IsNullOrEmpty(token))
            {
                var isValid = await AuthService.ValidateTokenAsync(token);
                if (isValid)
                {
                    Navigation.NavigateTo("/dashboard", true);
                }
            }
        }
        catch
        {
            // Continue with login page
        }
    }

    private async Task HandleLogin()
    {
        if (string.IsNullOrWhiteSpace(loginModel.Username) || string.IsNullOrWhiteSpace(loginModel.Password))
        {
            errorMessage = "Please enter both username and password.";
            return;
        }

        isLoading = true;
        errorMessage = "";
        successMessage = "";

        try
        {
            var result = await AuthService.LoginAsync(loginModel.Username, loginModel.Password);

            if (result.Success)
            {
                // Store the JWT token
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "jwtToken", result.AccessToken);
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "refreshToken", result.RefreshToken);
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "adminLoggedIn", "true");

                successMessage = "Login successful! Redirecting to dashboard...";
                
                // Delay to show success message
                await Task.Delay(1500);
                
                Navigation.NavigateTo("/dashboard", true);
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Login error");
            errorMessage = "An error occurred during login. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleCreateAdmin()
    {
        if (string.IsNullOrWhiteSpace(createAdminModel.Username) || 
            string.IsNullOrWhiteSpace(createAdminModel.Password) ||
            string.IsNullOrWhiteSpace(createAdminModel.Email) ||
            string.IsNullOrWhiteSpace(createAdminModel.FullName))
        {
            errorMessage = "Please fill in all fields.";
            return;
        }

        isCreatingAdmin = true;
        errorMessage = "";

        try
        {
            var result = await AuthService.CreateInitialAdminAsync(
                createAdminModel.Username, 
                createAdminModel.Email, 
                createAdminModel.Password, 
                createAdminModel.FullName);

            if (result)
            {
                successMessage = "Admin account created successfully! You can now login.";
                showCreateAdmin = false;
                createAdminModel = new CreateAdminModel();
                adminExists = true;
            }
            else
            {
                errorMessage = "Failed to create admin account. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Create admin error");
            errorMessage = "An error occurred while creating the admin account.";
        }
        finally
        {
            isCreatingAdmin = false;
        }
    }
}

<script src="_framework/blazor.web.js"></script>
</body>
</html>