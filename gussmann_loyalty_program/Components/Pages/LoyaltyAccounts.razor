@page "/loyalty-accounts"
@using gussmann_loyalty_program.Models
@using gussmann_loyalty_program.Services
@inject LoyaltyService LoyaltyService
@rendermode InteractiveServer

<PageTitle>Loyalty Accounts - Gussmann Loyalty Program</PageTitle>

<h1>Loyalty Accounts</h1>

@if (customers != null && customers.Any())
{
   <div class="table-responsive">
      <table class="table table-striped table-hover">
         <thead class="table-dark">
            <tr>
               <th>Customer</th>
               <th>Account Number</th>
               <th>Points Balance</th>
               <th>Tier Level</th>
               <th>Lifetime Earned</th>
               <th>Lifetime Redeemed</th>
               <th>Last Activity</th>
               <th>Status</th>
            </tr>
         </thead>
         <tbody>
            @foreach (var customer in customers)
            {
               @foreach (var account in customer.LoyaltyAccounts)
               {
                  <tr>
                     <td>
                        <div>
                           <strong>@customer.FirstName @customer.LastName</strong><br />
                           <small class="text-muted">@customer.Email</small>
                        </div>
                     </td>
                     <td>@account.AccountNumber</td>
                     <td class="text-end">
                        <strong>@account.PointsBalance.ToString("N0")</strong>
                     </td>
                     <td>
                        <span class="badge @GetTierBadgeClass(account.TierLevel)">@account.TierLevel</span>
                     </td>
                     <td class="text-end">@account.LifetimePointsEarned.ToString("N0")</td>
                     <td class="text-end">@account.LifetimePointsRedeemed.ToString("N0")</td>
                     <td>
                        @if (account.LastActivityDate.HasValue)
                        {
                           @account.LastActivityDate.Value.ToString("MM/dd/yyyy")
                        }
                        else
                        {
                           <span class="text-muted">No activity</span>
                        }
                     </td>
                     <td>
                        <span class="badge @(account.IsActive ? "bg-success" : "bg-danger")">
                           @(account.IsActive ? "Active" : "Inactive")
                        </span>
                     </td>
                  </tr>
               }
            }
         </tbody>
      </table>
   </div>

   <!-- Summary Cards -->
   <div class="row mt-4">
      <div class="col-md-3">
         <div class="card text-center">
            <div class="card-body">
               <h5 class="card-title">Total Accounts</h5>
               <h3 class="text-primary">@totalAccounts</h3>
            </div>
         </div>
      </div>
      <div class="col-md-3">
         <div class="card text-center">
            <div class="card-body">
               <h5 class="card-title">Bronze Tier</h5>
               <h3 class="text-secondary">@tierCounts["Bronze"]</h3>
            </div>
         </div>
      </div>
      <div class="col-md-3">
         <div class="card text-center">
            <div class="card-body">
               <h5 class="card-title">Silver Tier</h5>
               <h3 class="text-light">@tierCounts["Silver"]</h3>
            </div>
         </div>
      </div>
      <div class="col-md-3">
         <div class="card text-center">
            <div class="card-body">
               <h5 class="card-title">Gold+ Tier</h5>
               <h3 class="text-warning">@(tierCounts["Gold"] + tierCounts["Platinum"])</h3>
            </div>
         </div>
      </div>
   </div>
}
else
{
   <div class="text-center py-5">
      <h4 class="text-muted">No loyalty accounts found</h4>
      <p class="text-muted">Loyalty accounts are automatically created when customers are added.</p>
   </div>
}

@code {
   private List<Customer> customers = new();
   private int totalAccounts = 0;
   private Dictionary<string, int> tierCounts = new Dictionary<string, int>
{
{ "Bronze", 0 },
{ "Silver", 0 },
{ "Gold", 0 },
{ "Platinum", 0 }
};

   protected override async Task OnInitializedAsync()
   {
      await LoadData();
   }

   private async Task LoadData()
   {
      customers = await LoyaltyService.GetAllCustomersAsync();
      CalculateStatistics();
   }

   private void CalculateStatistics()
   {
      totalAccounts = customers.SelectMany(c => c.LoyaltyAccounts).Count();

      foreach (var tier in tierCounts.Keys.ToList())
      {
         tierCounts[tier] = 0;
      }

      foreach (var customer in customers)
      {
         foreach (var account in customer.LoyaltyAccounts)
         {
            if (tierCounts.ContainsKey(account.TierLevel))
            {
               tierCounts[account.TierLevel]++;
            }
         }
      }
   }

   private string GetTierBadgeClass(string tierLevel)
   {
      return tierLevel.ToLower() switch
      {
         "bronze" => "bg-secondary",
         "silver" => "bg-light text-dark",
         "gold" => "bg-warning text-dark",
         "platinum" => "bg-dark",
         _ => "bg-secondary"
      };
   }
}